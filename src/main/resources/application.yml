server:
  port: 8080

spring:
  config:
    import: optional:file:.env[.properties] # 보안이 중요한 정보들은 env 파일로 관리

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/used_trade_site?serverTimezone=Asia/Seoul
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}  # 구글 이메일 입력
    password: ${MAIL_PASSWORD}  # 2단계 인증 앱 비밀번호 입력
    protocol: smtp
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
            redirect-uri: http://localhost:8080/login/oauth2/code/google
            authorization-grant-type: authorization_code
            client-name: Google

          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            scope:
              - name
              - email
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            client-name: Naver

          kakao:
            client-name: kakao
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/kakao
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            scope:
              - profile_nickname
              - account_email

        provider:
#          google:
#            authorization-uri: https://accounts.google.com/o/oauth2/auth
#            token-uri: https://oauth2.googleapis.com/token
#            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
#            user-name-attribute: sub  # 구글에서 고유 사용자 ID는 "sub"로 제공

          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response  #  네이버 로그인시 getAttributes에서 id와 email이 response 안에 있기 때문

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id  # 카카오에서 고유 사용자 ID는 "id"로 제공


  jpa:
    hibernate:
      ddl-auto: update #테이블 생성
    properties:
      hibernate:
        show_sql: true # SQL 쿼리를 로그에 출력
        format_sql: true # SQL 쿼리를 가독성 좋게 포맷
        default_batch_fetch_size: 100
    database-platform: org.hibernate.dialect.MySQL8Dialect #SQL 방언(dialect)을 설정하고, 각 데이터베이스에 최적화된 쿼리로 자동 변환

  servlet:
    multipart:
      max-file-size: 20MB # 파일 1개당 최대 크기
      max-request-size: 100MB # 요청당 최대 파일 크기

itemImgLocation: C:/shop/item # 상품 이미지 업로드 경로
uploadPath: file:///C:/shop/ # 리소스 업로드 경로


logging:
  level:
    org:
      hibernate:
        type:
          descriptor:
            sql: trace
#    root: debug # 디버그 모드 활성화

# iamport - 결재 API
imp:
  code: ${IMP_CODE}
  api:
    key: ${IMP_API_KEY}
    secretkey: ${IMP_SECRET_KEY}

#    org.springframework.security: DEBUG


